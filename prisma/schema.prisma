// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Post {
    id            Int            @id @default(autoincrement())
    updatedAt     DateTime       @default(now()) @updatedAt
    content       String         @db.Text
    author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId      Int
    comments      Comment[]
    likes         Likes[]
    sharedFrom    Post?          @relation("ParentChild", fields: [sharedId], references: [id], onDelete: Cascade)
    listShare     Post[]         @relation("ParentChild")
    sharedId      Int?
    notifications Notification[]
    reports       Report[]
    attachments   String?
}

model Comment {
    id          Int      @id @default(autoincrement())
    updatedAt   DateTime @default(now()) @updatedAt
    content     String   @db.Text
    author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId    Int
    post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId      Int
    likes       Likes[]
    attachments String?
}

model Profile {
    bio         String?
    user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      Int     @unique
    gender      String
    age         Int
    avatar      String  @default("noAvatar.png")
    wallpaper   String  @default("noCover.png")
    description String
}

model User {
    id                    Int             @id @default(autoincrement())
    email                 String          @unique
    role                  Role            @default(USER)
    banned                Boolean         @default(false)
    timeBanned            DateTime?       @default(now())
    name                  String
    posts                 Post[]
    comments              Comment[]
    likes                 Likes[]
    profile               Profile?
    password              String
    hasFriends            User[]          @relation("friends")
    friendsWith           User[]          @relation("friends")
    friendRequestSent     friendRequest[] @relation("sender")
    friendRequestReceived friendRequest[] @relation("receiver")
    notifications         Notification[]
    reports               Report[]
}

model Likes {
    id        Int      @id @default(autoincrement())
    created   DateTime @default(now())
    author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId  Int
    post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId    Int?
    comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
    commentId Int?
}

enum Role {
    USER
    ADMIN
}

model friendRequest {
    createdAt  DateTime @default(now())
    sender     User     @relation("sender", fields: [senderId], references: [id], onDelete: Cascade)
    senderId   Int
    receiver   User     @relation("receiver", fields: [receiverId], references: [id], onDelete: Cascade)
    receiverId Int

    @@id([senderId, receiverId])
}

model Notification {
    createdAt DateTime @default(now())
    content   String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    Int
    post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId    Int?

    @@id([userId, createdAt])
}

model Report {
    id        Int      @id @default(autoincrement())
    resolved  Boolean  @default(false)
    createdAt DateTime @default(now())
    content   String
    author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId  Int
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId    Int
}
